/*******************************************************************************
* Copyright 2002-2014, OpenNebula Project (OpenNebula.org), C12G Labs
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
******************************************************************************/

// Seham Basabain 2015 
// MSc project Cloud Computing
//--------------------Importing packages--------------------------------------------------------
import org.opennebula.client.Client;
import org.opennebula.client.OneResponse;
import org.opennebula.client.vm.VirtualMachine;
import org.opennebula.client.vm.VirtualMachinePool;
import org.opennebula.client.host.Host;
import org.opennebula.client.host.HostPool;
import java.util.Scanner;
import java.io.Console;
import java.util.Arrays;
import java.util.ArrayList;
import java.io.File;
import java.util.List;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.io.*;


public class VMmigrate{

    public static void main(String[] args)
    {
        
//------------------------------------------------------------------------------------------------
        // First of all, a Client object has to be created.
        // Here the client will try to connect to OpenNebula using the default
        // options: the auth. file will be assumed to be at $ONE_AUTH, and the
        // endpoint will be set to the environment variable $ONE_XMLRPC.
        
        Client oneClient;
        String passwd;

//----------------Access Authorization---------------------------------------------------------
    
        String username = System.getProperty("user.name");
        passwd = new String(System.console().readPassword("[%s]", "Password:"));

        try
        {
            oneClient = new Client(username + ":" + passwd, "http://10.10.0.1:2633/RPC2");
        }
        catch (Exception e)
        {
            System.out.println(e.getMessage());
            return;
        }
  
       OneResponse rc,rc1,rc2,rc3;
        
          try
        {
            
         Scanner   in = new Scanner(System.in);

//----------------------------------------------------------------------------------------------------

            // The reference is lost, but we can ask OpenNebula about the VM
            // again. This time however, we are going to use the VM pool
            VirtualMachinePool vmPool = new VirtualMachinePool(oneClient);
                 
            // Remember that we have to ask the pool to retrieve the information
            // from OpenNebula
            rc = vmPool.info();

            if(rc.isError())
                throw new Exception( rc.getErrorMessage() );

            System.out.println("\nThese are all the Virtual Machines in the pool:");
            for ( VirtualMachine vmachine : vmPool )
            {
                System.out.println("\tID :" + vmachine.getId() + ", Name :" + vmachine.getName());

            }

            HostPool hostPool=new HostPool(oneClient);

            rc1=hostPool.info();

            if(rc1.isError())
                throw new Exception(rc1.getErrorMessage());
           String HostInfo = rc1.getMessage();

            //printing information about host from the host pool
            System.out.println("\nThese are all Hosts in the pool:");
            for( Host hosts : hostPool)
            {     
            System.out.println("Host Name:\t"+ hosts.getName()+ " Host ID:\t"+ hosts.getId()+ "\n");
            }

//-------------Migrating the VM--------------------------------------------------------------------------

            Scanner   input = new Scanner(System.in);

            //Asking the user to specify VMId for the VM he wants to migrate
            System.out.println("Please Enter the VM ID which you want to migrate: ");
            int VMId=input.nextInt();

            // We can create a representation for this VM, using the entered VM-ID
            VirtualMachine vm = new VirtualMachine(VMId, oneClient);
 
             rc = vm.info();

             String HostID = vm.xpath("HISTORY_RECORDS/HISTORY[last()]/HID");
             System.out.println("\nCurrent Host of this VM is:\t" + HostID);

            long migrateTotalTime,startTime,endTime; 
//----------------------------------------------------------------------------------------------------
            // Host Registry
            int VMinHost=0;
            int VMinPrevHost=0;
            //These variables will be used to calculate the percentage of CPU allocation in each host
           int usedCPU=0;
           int MaxCPU=0;
           //counters
            int i=0;
            int j=0;
            int g=0;
            int l=0;
            // Host ranking history
            System.out.println("********************************");
            System.out.println("Here is the Host Ranking profile");

            //get migration history from host profile
            List<Integer> integers = new ArrayList<Integer>();    
            Scanner fileScanner = new Scanner(new File("/home/csunix/sc14ssb/zabbix/HostProfile.txt"));
            while (fileScanner.hasNextInt())
          {
            integers.add(fileScanner.nextInt());  
          }

           //convert list into array of integers
            int[] array = new int[integers.size()];
            for (int x=0; x < array.length; x++)
          {
            array[x] = integers.get(x).intValue();
          }

            //get host workload and CPU utilization
            List<Integer> workload = new ArrayList<>();
            int[] CPUuse = new int[array.length];


            String[] lines = HostInfo.split("\\<");
            String pattern = "^RUNNING_VMS";   
            String pattern2 = "^CPU_USAGE"; 
            String pattern3 = "^MAX_CPU";

           for (String line : lines)   
     {
     // Create a Pattern object
      Pattern r = Pattern.compile(pattern);
      Pattern p = Pattern.compile(pattern2);
      Pattern n = Pattern.compile(pattern3);
     // Now create matcher object.
      Matcher m = r.matcher(line);
      Matcher ma = p.matcher(line);
      Matcher mat = n.matcher(line);

        if (m.find( ))
        {
        //get number of VMs running in each host  
        VMinHost= Integer.parseInt(line.substring(line.length() - 1));     
        System.out.println("Host "+ i +" has "+ VMinHost+ " current deployed VMs and has been used "+ array[i]+ " times to migrate to");
        
        // this variable will be evaluated to get best host 
        workload.add(VMinHost);
       
        i++;
    
        }
  
        if (mat.find( ))
        {
        //get the number of cores by dividing the maxCPU over 100
            if (line.length() == 13)
            {  
                MaxCPU= Integer.parseInt(line.substring(line.length()- 3)); 
                MaxCPU=MaxCPU/100;
            } 
              else if (line.length() == 12)
              {  
              MaxCPU= Integer.parseInt(line.substring(line.length()- 2));
              MaxCPU=MaxCPU/100;
              }  
                else
                 {  
                 MaxCPU= Integer.parseInt(line.substring(line.length()- 1));  
                 MaxCPU=MaxCPU/100; 
                 } 
            l++;
    
        }


        if (ma.find( ))
        {
        //get the percent of CPU usage 
       
          if (line.length() == 13)
            {  
             usedCPU= Integer.parseInt(line.substring(line.length()- 3));
                    if (MaxCPU != 0)
                    {
                      usedCPU=usedCPU/MaxCPU;
                    }
                    else
                    {
                     usedCPU=0;
                    }
            } 
              else if (line.length() == 12)
              {  
              usedCPU= Integer.parseInt(line.substring(line.length()- 2));
                    if (MaxCPU != 0)
                    {
                      usedCPU=usedCPU/MaxCPU;
                    }
                    else
                    {
                     usedCPU=0;
                    }
              }  
                else
                 {  
                 usedCPU= Integer.parseInt(line.substring(line.length()- 1));
                    if (MaxCPU != 0)
                    {
                      usedCPU=usedCPU/MaxCPU;
                    }
                    else
                    {
                     usedCPU=0;
                    }
                 } 
 
        // the CPU utilization of each host will be used in case the preferred host 
        // is the same as the current host of the VM so we will migrate to a host with least CPU utilization 
        CPUuse[g]=usedCPU;
         g++;
    
        }

  
     
     }
//------------------------------------------------------------------------------------------ 
          //convert list into array of integers
          int[] arrayy = new int[workload.size()];
//          int[] CPUuse = new int[cpuUsed.size()];
          for (int m=0; m < arrayy.length; m++)
     {
        arrayy[m] = workload.get(m).intValue();
//        CPUuse[m] = cpuUsed.get(m).intValue();

    }
       
     System.out.println("**********************************");
     System.out.println("The following Hosts have the least workload");
 

    // to hold the best host suggested
     List<Integer> preferredHost = new ArrayList<>();
     int minValue = arrayy[0]; 
     int leastCPU = CPUuse[0];
     int hostIndex=0;
    // int migTimes=array[0];
for(int v=0;v<arrayy.length;v++)
{
       for(int c=0;c<arrayy.length;c++)
       { 
          if(arrayy[c] < minValue)
          { 
           minValue = arrayy[c]; 
          }
              else if(CPUuse[c] < leastCPU)
              { 
               leastCPU= CPUuse[c]; 
               hostIndex = c;
              }
       }
    if(arrayy[v] == minValue)
      {   
          
           preferredHost.add(v); 
          
      } 
}
     
//Now we get the host of Least workload 
//If the output is more than one host then we should look into the host migration history profile to choose the one 
// that has been used more times for migration
int migHostId =0;
if (preferredHost.size()>1)
{ 
       System.out.println(preferredHost); 
       int[] myHost = new int[preferredHost.size()];
       List<Integer> BestHost = new ArrayList<>();
       
       int h=0;
       int migTimes = 0;
     System.out.println("But,, the Best host among them is the one that has been used more times for migration which is Host: ");
     for (int d=0; d <=(preferredHost.size()-1); d++)
     {
        myHost[d] = preferredHost.get(d).intValue();
        int index=myHost[d];
        if(array[index] >= migTimes)
         {
            migTimes=array[index];
            BestHost.add(index);
           
          //Host ID which VM is to be migrated to
            migHostId=BestHost.get(h).intValue();
            h++;
         }
 
     } 
          //This is the host the degraded VM will be migrated to
           System.out.println(migHostId);
          }


else
{
//Host ID which VM is to be migrated to
 System.out.println(preferredHost);
 migHostId=preferredHost.get(0).intValue();
} 
System.out.println("**********************************");
//--------------------------------------------------------------------------------------------------------


            //VM should be migrated to another host
            rc = vm.info();

            int oldHost = Integer.parseInt(HostID);

            if (oldHost != migHostId)  
           {
                
                //start migration timer
                startTime= System.nanoTime();
                // Live migration
                rc2 = vm.migrate(migHostId, true);
               

                if (!(rc2.isError())) {


                    rc = vm.info();

           
              HostID = vm.xpath("HISTORY_RECORDS/HISTORY[last()]/HID");
             
              // chick if the VM has the same host ID means that it has not migrated yet 
              while (oldHost == Integer.parseInt(HostID))
                   {    Thread.sleep(1000); 

                        rc = vm.info();
                        HostID = vm.xpath("HISTORY_RECORDS/HISTORY[last()]/HID");
                    }

                    endTime = System.nanoTime();
                    migrateTotalTime = endTime - startTime;

              // Host pool update after migration
              HostPool UpdatedhostPool=new HostPool(oneClient);
              rc3=UpdatedhostPool.info();
              String updatedHostInfo = rc3.getMessage();


              if(rc3.isError())
                throw new Exception(rc3.getErrorMessage());
              
//----------------------------------------------------------------------------------------------------------
             // Updated Host ranking history
              System.out.println("Here is the Updated Host Ranking profile");

            //Update the migration history file
            try {
            String file ="/home/csunix/sc14ssb/zabbix/HostProfile.txt";
            FileWriter fw = new FileWriter (file);
            BufferedWriter bw = new BufferedWriter (fw);
            PrintWriter fileOut = new PrintWriter (bw); 
            array[migHostId]++;
            for(int s=0; s<8; s++)
            {
            fileOut.println(array[s]); 
            }
            fileOut.close();
        }
        catch (Exception e){
            System.out.println(e.toString());
        }      

              String[] liness = updatedHostInfo.split("\\<");
 
              for (String linee : liness)   
              {
              // Create a Pattern object
              Pattern r = Pattern.compile(pattern);
              // Now create matcher object.
              Matcher m = r.matcher(linee);

                 if (m.find( ))
                 {
                   //get number of VMs in each host  
                    VMinHost= Integer.parseInt(linee.substring(linee.length() - 1));
                    if(oldHost!=j) 
                    {                
                     System.out.println("Host "+ j +" has "+ VMinHost+ " current deployed VMs and has been used "+ array[j]+ " times to migrate to");
                    }

                    if(oldHost==j)
                    {
                     VMinPrevHost=(VMinHost - 1);
                     System.out.println("Host "+ j +" has "+ VMinPrevHost+ " current deployed VMs and has been used "+ array[j]+ " times to migrate to");
                    }
                  
                   j++;
       
                 }
               }               

                    System.out.println("migrated in " + migrateTotalTime + "\t nanasecond");

                    rc = vm.info();

                
                    HostID = vm.xpath("HISTORY_RECORDS/HISTORY[last()]/HID");

                   // printing the new hostID
                    System.out.println("The VM new host is\t" + HostID); 

                } else
                    System.out.println(rc2.getErrorMessage());
         } 
//------------------------------------------------------------------------------------------------------------
          else
        {
               System.out.println("VM should be migrated to a different Host, So host with least CPU utilization will be selected");
               // least CPU utilization
               migHostId=hostIndex;
               startTime= System.nanoTime();
                // Live migration
                rc2 = vm.migrate(migHostId, true);    
                if (!(rc2.isError())) 
              {

                rc = vm.info();
           
                 HostID = vm.xpath("HISTORY_RECORDS/HISTORY[last()]/HID");
             
              // chick if the VM has the same host ID means that it has not migrated yet 
                   while (oldHost == Integer.parseInt(HostID))
                   {    Thread.sleep(1000); 

                        rc = vm.info();
                        HostID = vm.xpath("HISTORY_RECORDS/HISTORY[last()]/HID");
                    }

                    endTime = System.nanoTime();
                    migrateTotalTime = endTime - startTime;

              // Host pool update after migration
              HostPool UpdatedhostPool=new HostPool(oneClient);
              rc3=UpdatedhostPool.info();
              String updatedHostInfo = rc3.getMessage();


              if(rc3.isError())
                throw new Exception(rc3.getErrorMessage());
              
//----------------------------------------------------------------------------------------------------------
             // Updated Host ranking history
              System.out.println("Here is the Updated Host Ranking profile");

            //Update the migration history file
            try 
        {
            String file ="/home/csunix/sc14ssb/zabbix/HostProfile.txt";
            FileWriter fw = new FileWriter (file);
            BufferedWriter bw = new BufferedWriter (fw);
            PrintWriter fileOut = new PrintWriter (bw); 
            array[migHostId]++;
            for(int s=0; s<8; s++)
            {
            fileOut.println(array[s]); 
            }
            fileOut.close();
        }
        catch (Exception e)
        {
            System.out.println(e.toString());
        }      

              String[] liness = updatedHostInfo.split("\\<");
 
              for (String linee : liness)   
              {
              // Create a Pattern object
              Pattern r = Pattern.compile(pattern);
              // Now create matcher object.
              Matcher m = r.matcher(linee);

                 if (m.find( ))
                 {
                   //get number of VMs in each host  
                    VMinHost= Integer.parseInt(linee.substring(linee.length() - 1));
                    if(oldHost!=j) 
                    {                
                     System.out.println("Host "+ j +" has "+ VMinHost+ " current deployed VMs and has been used "+ array[j]+ " times to migrate to");
                    }

                    if(oldHost==j)
                    {
                     VMinPrevHost=(VMinHost - 1);
                     System.out.println("Host "+ j +" has "+ VMinPrevHost+ " current deployed VMs and has been used "+ array[j]+ " times to migrate to");
                    }
                  
                   j++;
       
                 }
               } 
//------------------------------------------------------------------------------------------------------------                 

                    System.out.println("migrated in " + migrateTotalTime + "\t nanasecond");

                    rc = vm.info();

                
                    HostID = vm.xpath("HISTORY_RECORDS/HISTORY[last()]/HID");

                   // printing the new hostID
                    System.out.println("The VM new host is\t" + HostID); 

                } else
                    System.out.println(rc2.getErrorMessage());
               
              }

System.out.println("--------------------------------------------------------------------------------------------------------------");

        }
        catch( Exception e)
       {

            System.out.println(e.getMessage());
        }


    }

    public static void printVMachinePool (VirtualMachinePool vmPool)
    {
        System.out.println("--------------------------------------------");
        System.out.println("Number of VMs: " + vmPool.getLength());
        System.out.println("User ID\t\tName\t\tEnabled");

        // You can use the for-each loops with the OpenNebula pools
        for( VirtualMachine vm : vmPool )
        {
            String id = vm.getId();
            String name = vm.getName();
            String enab = vm.xpath("enabled");

            System.out.println(id+"\t\t"+name+"\t\t"+enab);
        }

        System.out.println("--------------------------------------------");
    }
}
