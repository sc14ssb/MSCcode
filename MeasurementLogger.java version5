/**
 * Copyright 2014 University of Leeds
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */
package eu.ascetic.asceticarchitecture.iaas.zabbixdatalogger;

import eu.ascetic.asceticarchitecture.iaas.energymodeller.queryinterface.datasourceclient.Measurement;
import eu.ascetic.ioutils.GenericLogger;
import eu.ascetic.ioutils.ResultsStore;
import java.io.File;
import java.util.ArrayList;
import java.util.Collection;
import java.util.logging.Level;


/**
 *
 * @author Richard Kavanagh
 * edited by Seham Basabain for MSc project in HPC-2015
 */
public class MeasurementLogger extends GenericLogger<Measurement> {

    ArrayList<String> metricNames = new ArrayList<>();
    
    
    //define variables
    public double cpu=0.0;
    public double availablememory=0.0;
    public double totalmemory=0.0;
    public double memthreshold=0.0;
    public double diskwrite=0.0;
    public int migrate=0;
    public int timeinterval=0;
    // hold how many times metrics reach thresholds
    public int cpuCount=0;
    public int memoryCount=0;
    public int diskwriteCount=0;
    // hold values of metrics when reach thresholds
    public double cpuSpike=0.0;
    public double memorySpike=0.0;
    public double diskSpike=0.0;
    String physicalHost;
    double avgdisk=0.0;
    double avgcpu=0.0;
    double avgmemory=0.0;
    
    
    public MeasurementLogger(File file, boolean overwrite) {
        super(file, overwrite);
        saveFile.setDelimeter("\t");
    }

    /**
     * This writes a measurement out to disk for the purpose of auditing what is
     * going on. It by default overwrites the previous file
     *
     * @param store The results store to save data to
     * @param measurements The measurement to write to file
     */
    
    @Override
    public void saveToDisk(ResultsStore store, Collection<Measurement> measurements) {
        try {
            if (!store.getResultsFile().exists() || metricNames.isEmpty()) {
                /**
                 * Write out the header if the file does not exist or is if the
                 * file is been appended to for the first time. i.e. the headers
                 * may be in a different order.
                 */
                for (Measurement measurement : measurements) {
                    metricNames.addAll(measurement.getMetricNameList()); 
                    writeHeader(store);
                    /**
                     * This gets the first item out of the measurements list, so
                     * the header can be written.
                     */
                    break;  
                    
                }


            }
            for (Measurement measurement : measurements) {
                writebody(measurement, store);
                store.saveMemoryConservative();
            }
 
        } catch (Exception ex) {
            //logging is important but should not stop the main thread from running!
            java.util.logging.Logger.getLogger(GenericLogger.class.getName()).log(Level.SEVERE, "An error occurred when saving an item to disk", ex);
        }
    }

    @Override
    public void writeHeader(ResultsStore store) {
        store.add("Time Stamp Data");
        System.out.println("Performace metrics monitored are:"); 
        for (String name : metricNames) {
          if (name.equals("vm.memory.size[available]") || name.equals("vm.memory.size[total]") || name.equals("physical_host") || name.equals("disk-write") || name.equals("cpu-measured"))
       { 
        System.out.println(name);   
        store.append(name); 
       }   
        }
    }

    // Here only data about CPU, memory and disk are logged to file
    @Override
     public void writebody(Measurement item, ResultsStore store) {
        store.add(item.getClock());
        for (String name : metricNames)
        {
         
//----------------------------------------------------------------
             //setting the memory threshold
           if ( name.equals("vm.memory.size[total]")) 
           { 
        totalmemory=Double.parseDouble(item.getMetric(name).getValueAsString());
        // convert from bytes to megabytes
        totalmemory=totalmemory/1000000;
        store.append(totalmemory); 
        // 10 % is the threshold 
        memthreshold= totalmemory/10;
           }
        
//----------------------------------------------------------------      
      
        if (name.equals("disk-write"))
        {
        diskwrite=Double.parseDouble(item.getMetric(name).getValueAsString());
        
        store.append(diskwrite);       
       // consecutive calculations of thresholds hits
        if (diskwrite <= 18000.0)
                {
                    diskwriteCount++;
                    diskSpike=diskSpike+diskwrite;
                }
        else 
       {
           // if not consecutive do not increment counter
           if(diskwrite > 18000.0 && diskwriteCount<3)
           {
               diskwriteCount=0;
               avgdisk=avgdisk+diskwrite;
           }  
       }
   
        } 
//----------------------------------------------------------------    
            // CPU data of processor utilisation in percents        
          if (name.equals("cpu-measured"))
        {
            // each round store the value of it in the current time 
            // and logs it to file
        store.append(item.getMetric(name).getValueAsString()); 
        // to hold last value because of fluctuations 
        cpu=Double.parseDouble(item.getMetric(name).getValueAsString());
      
        // record how many times it reaches the threshold during running time
       if (cpu >= 80.0000)
                {
                    cpuCount++;
                    cpuSpike=cpuSpike+cpu;
                }
       else 
       {
           // if not consecutive do not increment counter
           if(cpu < 80.0000 && cpuCount< 3)
           {
               cpuCount=0;
               avgcpu=avgcpu+cpu;
           }  
       }
     
        }       
//---------------------------------------------------------------
 
       // memory data size calculated in bytes   
           if (name.equals("vm.memory.size[available]"))
        {
        availablememory=Double.parseDouble(item.getMetric(name).getValueAsString());
        availablememory=availablememory/1000000;
      
        store.append(availablememory);       
        if (availablememory <= memthreshold)
                {
                    memoryCount++;
                    memorySpike=memorySpike+availablememory;
                    
                }
        else 
       {
           // if not consecutive do not increment counter
           if(availablememory > memthreshold && memoryCount< 3)
           {
               memoryCount=0;
               avgmemory=avgmemory+availablememory;
           }  
       }

        } 
           
           
//----------------------------------------------------------------
        

           if (name.equals("physical_host"))
           {
             store.append(item.getMetric(name).getValueAsString()); 
             physicalHost=item.getMetric(name).getValueAsString();
           }
        }  
       // Because of the fluctuations we need to specify the time interval each metric recorded at
        timeinterval++;
      
   }
    
    
    public void doesVMNeedMigrate()
    {
         // get the average performance degradation of all metrics
        diskSpike=diskSpike/diskwriteCount;   
        cpuSpike=cpuSpike/cpuCount;
        memorySpike=memorySpike/memoryCount;
        
        // get the average performance of all metrics that perform well
        avgcpu=avgcpu/timeinterval;
        avgdisk=avgdisk/timeinterval;
        avgmemory=avgmemory/timeinterval;
        
      if (cpuCount >= 3)
     {
         // counter to hold VM migrate decision
         migrate++;
     }
      
     if (memoryCount >= 3)
     {
         // counter to hold VM migrate decision
         migrate++;
     }
     
     if (diskwriteCount >= 3)
     {
         // counter to hold VM migrate decision
         migrate++;
     }
      
       
       // take decision       
       System.out.println("Current host for this VM is: "+ physicalHost);
           if(migrate >= 2)
             {
             System.out.println("In "+timeinterval+" seconds of application running VM NEEDS to migrate to other host ");        
               //CPU
                 if (cpuCount>=3)
                  {
                    System.out.println("Cpu reaches threshold "+ cpuCount + " times with average of "+ cpuSpike);
                  }
                  else
                  {
                    System.out.println("Cpu did not reach threshold It was "+ avgcpu);   
                  }
                      //Memory 
                      if (memoryCount>=3)
                       {
                        System.out.println("Memory reaches threshold "+ memoryCount +" times with average of " +memorySpike);
                       }
                       else
                       {
                       System.out.println("Memory did not reach threshold It was "+ avgmemory);  
                        } 
                           //Disk
                           if (diskwriteCount>=3)
                           {
                           System.out.println("Disk reaches threshold "+ diskwriteCount+ " times with average of "+ diskSpike); 
                           }
                           else
                           {
                           System.out.println("Disk did not reach threshold It was"+ avgdisk);  
                           } 
             }       
             else
               {
               System.out.println("In "+timeinterval+" seconds of application running VM does NOT need to migrate to other host "); 
               //CPU
                 if (cpuCount>=3)
                  {
                    System.out.println("Cpu reaches threshold "+ cpuCount + " times with average of "+ cpuSpike);
                  }
                  else
                  {
                    System.out.println("Cpu did not reach threshold It was "+ avgcpu);   
                  }
                      //Memory 
                      if (memoryCount>=3)
                       {
                        System.out.println("Memory reaches threshold "+ memoryCount +" times with average of " +memorySpike);
                       }
                       else
                       {
                       System.out.println("Memory did not reach threshold It was "+ avgmemory);  
                        } 
                           //Disk
                           if (diskwriteCount>=3)
                           {
                           System.out.println("Disk reaches threshold "+ diskwriteCount+ " times with average of "+ diskSpike); 
                           }
                           else
                           {
                           System.out.println("Disk did not reach threshold It was"+ avgdisk);  
                           } 
               }
    }  
 
}

