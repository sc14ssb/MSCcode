/**
 * Copyright 2014 University of Leeds
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */
package eu.ascetic.asceticarchitecture.iaas.zabbixdatalogger;

import eu.ascetic.asceticarchitecture.iaas.energymodeller.queryinterface.datasourceclient.Measurement;
import eu.ascetic.ioutils.GenericLogger;
import eu.ascetic.ioutils.ResultsStore;
import java.io.File;
import java.util.ArrayList;
import java.util.Collection;
import java.util.logging.Level;


/**
 *
 * @author Richard Kavanagh
 * edited by Seham Basabain for MSc project in HPC-2015
 */
public class MeasurementLogger extends GenericLogger<Measurement> {

    ArrayList<String> metricNames = new ArrayList<>();
    
    
    //define variables
    public double cpu=0.0;
    public double memory=0.0;
    public double disk=0.0;
    public int migrate=0;
    public int timeinterval=0;
    public int cpuCount=0;
    public int memoryCount=0;
    public int diskCount=0;

    public MeasurementLogger(File file, boolean overwrite) {
        super(file, overwrite);
        saveFile.setDelimeter("\t");
    }

    /**
     * This writes a measurement out to disk for the purpose of auditing what is
     * going on. It by default overwrites the previous file
     *
     * @param store The results store to save data to
     * @param measurements The measurement to write to file
     */
    
    @Override
    public void saveToDisk(ResultsStore store, Collection<Measurement> measurements) {
        try {
            if (!store.getResultsFile().exists() || metricNames.isEmpty()) {
                /**
                 * Write out the header if the file does not exist or is if the
                 * file is been appended to for the first time. i.e. the headers
                 * may be in a different order.
                 */
                for (Measurement measurement : measurements) {
                    metricNames.addAll(measurement.getMetricNameList()); 
                    writeHeader(store);
                    /**
                     * This gets the first item out of the measurements list, so
                     * the header can be written.
                     */
                    break;  
                    
                }


            }
            for (Measurement measurement : measurements) {
                writebody(measurement, store);
                store.saveMemoryConservative();
            }
 
        } catch (Exception ex) {
            //logging is important but should not stop the main thread from running!
            java.util.logging.Logger.getLogger(GenericLogger.class.getName()).log(Level.SEVERE, "An error occurred when saving an item to disk", ex);
        }
    }

    @Override
    public void writeHeader(ResultsStore store) {
        store.add("Time Stamp Data");
        System.out.println("Performace metrics monitored are:"); 
        for (String name : metricNames) {
            if (name.equals("system.cpu.util[,idle]") || name.equals("vm.memory.size[available]"))
       { 
        System.out.println(name);   
        store.append(name); 
       }   
        }
    }

    // Here only data about CPU, memory and disk are logged to file
    @Override
     public void writebody(Measurement item, ResultsStore store) {
        store.add(item.getClock());
        for (String name : metricNames)
        {
            
       // CPU data of processor utilisation in percents    
            if (name.equals("system.cpu.util[,idle]"))
        {
            // each round store the value of it in the current time 
            // and logs it to file
        store.append(item.getMetric(name).getValueAsString()); 
        // to hold last value because of fluctuations 
        cpu=Double.parseDouble(item.getMetric(name).getValueAsString());
        // record how many times it reaches the threshold during running time
        if (cpu < 15.0000)
                {
                    cpuCount++;
                }
        } 
            
//---------------------------------------------------------------          
       // memory data size calculated in bytes   
           if (name.equals("vm.memory.size[available]"))
        {
        memory=Double.parseDouble(item.getMetric(name).getValueAsString());
        memory= memory/1000000;
        store.append(memory);      
        // convert from byte to megabyte  
        if (memory < 20.0000)
                {
                    memoryCount++;
                }
        } 
                
/*/--------------------------------------------------------------            
         // disk data 
            //if ( name.equals("vfs.fs.size[/,used]"))
           { 
        store.append(item.getMetric(name).getValueAsString()); 
        disk=Double.parseDouble(item.getMetric(name).getValueAsString());
        if (disk < 10.0000)
                {
                    diskCount++;
                }
        } 
----------------------------------------------------------------*/
          
        } 
        
       // Because of the fluctuations we need to specify the time interval each metric recorded at
        timeinterval++;
    }
    
    
    public void doesVMNeedMigrate()
    {
      if (cpuCount >= 3)
     {
         // counter to hold VM migrate decision
         migrate++;
     }
      
           if (memoryCount >= 3)
          {
               migrate++;
          } 
           
              if (diskCount >= 3)
                  {
                   migrate++;
                  } 
       
       // take decision       
       if(migrate >= 2)
       System.out.println("In "+timeinterval+" seconds VM NEEDS to migrate to other host "+migrate+ " CPU-above-threshold"+ cpuCount+" memory-above-threshold"+ memoryCount ); 
       else
        System.out.println("In "+ timeinterval+" seconds VM does NOT need to migrate to other host "+migrate+ " CPU-above-threshold"+ cpuCount);   
    }  
 
}

